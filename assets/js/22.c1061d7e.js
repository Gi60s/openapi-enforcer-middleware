(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{378:function(t,e,a){"use strict";a.r(e);var s=a(44),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("You are looking at the documentation for version 1.x. For the documentation on the latest version see the "),a("RouterLink",{attrs:{to:"/guide/getting-started.html"}},[t._v("Guide")]),t._v(" or the "),a("RouterLink",{attrs:{to:"/api/"}},[t._v("API")]),t._v(".")],1)]),t._v(" "),a("p",[t._v("Producing mock responses is useful during the development of your API or during the development of clients that use your API. The mocking middleware can be added as "),a("a",{attrs:{href:"#explicit-mocking"}},[t._v("explicit mock middleware")]),t._v(" and "),a("a",{attrs:{href:"#fallback-mocking"}},[t._v("fallback mock middleware")]),t._v(".")]),t._v(" "),a("p",[t._v("When mocking middleware runs it does the following:")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("If a mock "),a("RouterLink",{attrs:{to:"/v1/guide/controllers.html"}},[t._v("controller")]),t._v(" is defined then that will be run to produce the response. Mock controllers follow the same structure and guidelines as regular "),a("RouterLink",{attrs:{to:"/v1/guide/controllers.html"}},[t._v("controllers")]),t._v(".")],1)]),t._v(" "),a("li",[a("p",[t._v("If the response has an example, that example will be used to produce the response.")])]),t._v(" "),a("li",[a("p",[t._v("If the response has a schema then the schema will be used to generate a random value that adheres to the schema.")])]),t._v(" "),a("li",[a("p",[t._v("If the request indicated "),a("a",{attrs:{href:"#explicit-mocking"}},[t._v("explicit mocking")]),t._v(" then the next middleware will be called with an error, otherwise the next middleware will be called without an error.")])])]),t._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("p",[t._v("This is a common configuration for setting up your mock middleware with "),a("a",{attrs:{href:"#explicit-mocking"}},[t._v("explicit mocking")]),t._v(" middleware first and "),a("a",{attrs:{href:"#fallback-mocking"}},[t._v("fallback mocking")]),t._v(" middleware last.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EnforcerMiddleware "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'openapi-enforcer-middleware'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" express "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("express")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" enforcer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EnforcerMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/openapi-definition.yml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nenforcer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// check for explicit mock request")]),t._v("\nenforcer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mocks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/mock-controllers-dir'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// normal request handling")]),t._v("\nenforcer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("controllers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/controllers-dir'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fallback mock handling last")]),t._v("\nenforcer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mocks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/mock-controllers-dir'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enforcer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("middleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"explicit-mocking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explicit-mocking"}},[t._v("#")]),t._v(" Explicit Mocking")]),t._v(" "),a("p",[t._v("Explicit mocking:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Is defined as a request that specifically asks for the response to be mocked.")])]),t._v(" "),a("li",[a("p",[t._v("Will only work if you have included the "),a("RouterLink",{attrs:{to:"/v1/guide/server.html"}},[t._v("mocks middleware")]),t._v(" on your server.")],1)]),t._v(" "),a("li",[a("p",[t._v("Watches for a mock query parameter or mock header parameter as defined in the "),a("RouterLink",{attrs:{to:"/v1/api.html#openapienforcermiddleware"}},[t._v("enforcer middleware constructor options")]),t._v(". If that mock parameter is included in the request then an explicit mock response will be produced.")],1)])]),t._v(" "),a("p",[t._v("The default mock query parameter or mock header parameter is set to "),a("code",[t._v("x-mock")]),t._v(" but can be redefined in the "),a("RouterLink",{attrs:{to:"/v1/api.html#openapienforcermiddleware"}},[t._v("enforcer middleware constructor options")]),t._v(". The value associated with that parameter can indicate the status code, source of mock data, and additional meta data used to produce the mock response. Here are some examples:")],1),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("x-mock")]),t._v(" - A value with an empty string, indicating that the default mock response should be returned.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("x-mock=200")]),t._v(" - Indicates that the 200 response code mock response should be returned. Any status code here is valid so long as it was defined in the OpenAPI document as a valid response for that operation.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("x-mock=200,controller")]),t._v(" - Indicates that the 200 response code should be used and that the mock controller should produce it. This will only work if a mock controller is defined for this operation.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("x-mock=200,example")]),t._v(" - Indicates that the 200 response code example should be used to produce the response for this operation.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("x-mock=200,example,cat")]),t._v(" - Indicates that the 200 response code example named "),a("code",[t._v("cat")]),t._v(" should be used to produce the response for this operation. This only works for OpenAPI specification 3.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("x-mock=200,random")]),t._v(" - Indicates that the 200 response code schema should be used to generate a random value that adheres to the schema.")])])]),t._v(" "),a("h3",{attrs:{id:"fallback-mocking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fallback-mocking"}},[t._v("#")]),t._v(" Fallback Mocking")]),t._v(" "),a("p",[t._v("Fallback mocking will run automatically (without an explicit mock request) when its middleware is called. Because of this, fallback mocking should be run after your normal "),a("RouterLink",{attrs:{to:"/v1/guide/server.html"}},[t._v("controllers middleware")]),t._v(", otherwise the normal controllers may never run.")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);